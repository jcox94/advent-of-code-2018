;;;; learn-cl.lisp

(in-package #:day1)

(defvar *table* (make-hash-table))

(defun reset-table ()
  (setf *table* (make-hash-table)))

(defun run-find (freqs)
  (sethash 0 *table* 0)
  (find-dup-freq freqs 0))

(defun run-find-arr (arr)
  (sethash 0 *table* 0)
  (find-dup-arr arr 0))

(defun find-dup-arr (arr sum)
  (declare (optimize (speed 3) (safety 0)))
  (loop for x across arr do
       (progn
	 (setf sum (+ sum x))
	 (let ((elem (gethash sum *table*)))
	   (if (eql elem nil)
	       (sethash sum *table* sum)
	       (return-from find-dup-arr sum)))))
  (find-dup-arr arr sum))

(defun find-dup-freq (freqs sum)
  (declare (optimize (speed 3) (safety 0)))
  (dolist (x freqs)
    (declare (type fixnum x sum))
    (setf sum (+ sum x))
    (let ((elem (gethash sum *table*)))
      (if (eql elem nil)
	  (sethash sum *table* sum)
	  (return-from find-dup-freq sum))))
  (find-dup-freq freqs sum))

(defmacro sethash (key hash val)
  `(setf (gethash ,key ,hash) ,val))
